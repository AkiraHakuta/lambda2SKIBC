/* test2.txt */  

putStr("//fixedpoint combinators");
[Y] ::= \f.((\x.f(xx))(\x.f(xx)));
[Z] ::= \f.((\x.(f(\y.(xxy))))(\x.(f(\y.(xxy)))));
[T] ::= (\x.\y.(y(xxy)))(\x.\y.(y(xxy)));
putStr("//The simplest fixed-point combinator, found by John Tromp, is");
[Y''] ::= (\x.\y.(xyx))(\y.\x.(y(xyx)));

NL;putStr("//booleans");
[tru] := \x.\y.x;
[fls] := \x.\y.y;
[and] := \x.\y.(xy[fls]);
[or]  := \x.\y.(y[tru]x);
[not] := \x.(x[fls][tru]);

NL;putStr("//church numerals");
[0] := [fls];
[succ] := \n.\s.\z.(s(nsz));
[1] := [succ][0];
[2] := [succ][1];
[3] := [succ][2];
[4] := [succ][3];
[5] := [succ][4];
[pred] := \n.(n(\g.(g[1])[succ])(\v.[0])[0]);
[iszero] := \n.(n(\x.[fls])[tru]);
[add] := \m.\n.\f.\x.(mf(nfx));
[mult] := \m.\n.\f.\x.(m(nf)x);
[sub] := \m.\n.(n[pred]m); 
putStr("//[power]xy=y^x");
[power] := \x.\y.(xy);//[power]xy = y^x

NL;putStr("//pairs");
[pair] := \x.\y.\f.(fxy); 
[fst] := \p.(p([tru]));
[snd] := \p.(p([fls]));

NL;putStr("//lists");
[cons] := [pair];
[head] := [fst];
[tail] := [snd];
[nil] := \x.[tru];
[isnil] := \p.(p(\x.\y.[fls]));
[nth] := \x.\i.([head](i[tail]x));

NL;putStr("//list example");
[list3241] := [cons][3]([cons][2]([cons][4]([cons][1][nil])));

NL;putStr("//etc");
[fact] := \f.\x.(([iszero]x)[1]([mult]x(f([pred]x))));
[fact'] := \f.\x.(([iszero]x)[1](([mult]x(ff([pred]x)))));
[sum_list] := \f.\x.(([isnil]x)[0]([add]([head]x)(f([tail]x))));
[sum_list'] := \f.\x.(([isnil]x)[0]([add]([head]x)(ff([tail]x))));
[map] := \m.\f.\l.(([isnil] l)[nil]([cons](f([head]l))(mf([tail]l))));
[map'] := \m.\f.\l.(([isnil] l)[nil]([cons](f([head]l))((mm)f([tail]l))));
[fold_left] := \f.\g.\a.\l.(([isnil]l)a(fg(ga([head]l))([tail]l)));
[fold_left'] := \f.\g.\a.\l.(([isnil]l)a(ffg(ga([head]l))([tail]l)));
[max_x_y] := \x.\y.(([iszero]([sub]xy))yx);
